# This configuration file contains variables and macros specific for homing X and Y using stallguard rather than 
# physical switches. You will likely need to have DIAG jumpers installed on your mainboard and Klipper configured
# correctly for this to work.
# 
# More information can be found here: https://www.klipper3d.org/TMC_Drivers.html?h=sens#sensorless-homing
# 
# Be sure to [include] this .cfg file in printer.cfg **BEFORE** you have working SGTHRS values for
# [tmcXXXX stepper_x] and [tmcXXXX stepper_y] as that will simplify this process. If you already have SGTHRS
# values in your config, they will likely need adjusting after enabling this configuration.
# 
# Default motor current and homing speed are configured per axis in printer.cfg
# 
##################################
## XY Sensorless Homing Variables:

[gcode_macro _Sensorless_Homing_Variables]
description: Variables for sensorless homing X and Y

variable_homing_current: 0.0                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_clear_time: 1                      # Time in seconds to wait for stallguard registers to clear, default is 1 second.
variable_backoff_distance: 5                # Distance in mm to back off from each axis after homing.
variable_z_hop_distance: 10                 # Distance to move Z away from printhead prior to homing, and after homing.
variable_first_homed_axis: 'X'              # First axis to home when 'G28' is called. Some prefer homing Y before X.

## The following variables are used for those who need to attach a dockable probe (Klicky, Euclid, etc) before homing the Z axis:

variable_probe_dock_enable: False
variable_attach_macro: 'Attach_Probe'
variable_detach_macro: 'Dock_Probe'

## The following variables are used for moving the printhead to a certain part of the bed before homing the Z axis:

variable_safe_z_enable: False               # Enables/disables moving the printhead before homing the Z axis.
variable_safe_x: -128                       # Safe X position to home the Z axis, leave at -128 to home to the center of the X axis.
variable_safe_y: -128                       # Safe Y position to home the Z axis, leave at -128 to home to the center of the Y axis.

# Do not modify below
variable_is_z_hopped: 0                     # Internal variable for controlling flow of Z hop moves
gcode:

[gcode_macro _HOME_X]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         # Pull variables from _Sensorless_Homing_Variables
    {% set backoff_distance = sensorless_variables.backoff_distance | float %}                      #

    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed * 60) | float %}   # Pull X axis homing speed from config

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'y' not in printer.toolhead.homed_axes %}                                               # Check if the Y axis is not homed, if Y is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'x' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If X is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard to clear in case Y was homed first

    G28 X                                                                                           # Home the X axis

    {% if backoff_distance > 0 %}                                                                   #
      G91                                                                                           #
      G0 X-{backoff_distance} F{homing_speed}                                                       # Check if variable_backoff_distance is greater than 0, and back off from axis
      G90                                                                                           #
    {% endif %}                                                                                     #

    G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}                 # Set X axis position to remove offset incurred from sensorless homing

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current was configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              #
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2660' %}                                                              #
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              #
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2660' %}                                                              #
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'y' in printer.toolhead.homed_axes %}                                                       # If the Y axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard to clear

[gcode_macro _HOME_Y]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         # Pull variables from _Sensorless_Homing_Variables
    {% set backoff_distance = sensorless_variables.backoff_distance | float %}                      #

    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed * 60) | float %}   # Pull Y axis homing speed from config

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'x' not in printer.toolhead.homed_axes %}                                               # Check if the X axis is not homed, if X is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'y' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If Y is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard to clear in case X was homed first

    G28 Y                                                                                           # Home the Y axis

    {% if backoff_distance > 0 %}                                                                   #
      G91                                                                                           #
      G0 Y-{backoff_distance} F{homing_speed}                                                       # Check if variable_backoff_distance is greater than 0, and back off from axis
      G90                                                                                           #
    {% endif %}                                                                                     #

    G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}                 # Set Y axis position to remove offset incurred from sensorless homing

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current is configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              #
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2660' %}                                                              #
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              #
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2660' %}                                                              #
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'x' in printer.toolhead.homed_axes %}                                                       # If the X axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard to clear

[homing_override]
axes: xyz
set_position_z: 0
gcode:

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}              #
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}    #
    {% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}                           #
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set z_hop_distance = sensorless_variables.z_hop_distance | float %}                          #
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}                     #
    {% set safe_x = sensorless_variables.safe_x | float %}                                          # Collect all variables needed for EZ_Sensorless_Homing
    {% set safe_y = sensorless_variables.safe_y | float %}                                          #
    {% set safe_z = sensorless_variables.safe_z_enable | abs %}                                     #
    {% set probe_dock_enable = sensorless_variables.probe_dock_enable | abs %}                      #
    {% set attach_macro = sensorless_variables.attach_macro | string %}                             #
    {% set detach_macro = sensorless_variables.detach_macro | string %}                             #
    {% set is_z_hopped = sensorless_variables.is_z_hopped | int %}                                  #

    {% if printer.configfile.settings.stepper_z.position_endstop is not defined %}                  # Check if Z is configured to home with a probe and pull config values for offsets
        {% set probe_x_offset = printer.configfile.settings.probe.x_offset | float %}               #
        {% set probe_y_offset = printer.configfile.settings.probe.y_offset | float %}               #
        {% set probe_z_offset = printer.configfile.settings.probe.z_offset | float %}               #
    {% else %}                                                                                      #
        {% set probe_x_offset = 0 | float %}                                                        #
        {% set probe_y_offset = 0 | float %}                                                        # If Z if not homed with a probe, set offsets to 0
        {% set probe_z_offset = 0 | float %}                                                        #
    {% endif %}                                                                                     #

    {% if safe_z == True %}                                                                         # Check if safe_z is enabled

        {% if safe_x == -128 %}                                                                     #
            {% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}              # If safe_x is '-128', set safe_x to the center of the X axis
        {% endif %}                                                                                 # 

        {% if probe_x_offset < 0 %}                                                                 #
            {% set safe_x = safe_x + probe_x_offset %}                                              #
        {% elif probe_x_offset > 0 %}                                                               # Depending on if probe_x_offset is a positive or negative value, adjust safe_x
            {% set safe_x = safe_x - probe_x_offset %}                                              #
        {% endif %}                                                                                 #

        {% if safe_y == -128 %}                                                                     # 
            {% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}              # If safe_y is '-128', set safe_y to the center of the Y axis
        {% endif %}                                                                                 #

        {% if probe_y_offset < 0 %}                                                                 #
            {% set safe_y = safe_y + probe_y_offset %}                                              #
        {% elif probe_y_offset > 0 %}                                                               # Depending on if probe_y_offset is a positive or negative value, adjust safe_y
            {% set safe_y = safe_y - probe_y_offset %}                                              #
        {% endif %}                                                                                 # 

    {% endif %}                                                                                     #

    {% if z_hop_distance > 0 and is_z_hopped == 0 %}                                                #
        G0 Z{z_hop_distance} F{z_hop_speed}                                                         # Check for z_hop_distance and move Z accordingly
        SET_GCODE_VARIABLE MACRO=_Sensorless_Homing_Variables VARIABLE=is_z_hopped VALUE=1          # Also set is_z_hopped variable to 1
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'X' %}                                                                # If first_homed_axis is 'X', begin G28 param check
      {% if home_all or 'X' in params %}                                                            #
        _HOME_X                                                                                     # if home_all or 'X' is in params, home X
      {% endif %}                                                                                   #
      {% if home_all or 'Y' in params %}                                                            # If home_all or 'Y' in params, home Y
        _HOME_Y                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'Y' %}                                                                # If first_homed_axis is 'Y', begin G28 param check
      {% if home_all or 'Y' in params %}                                                            #
        _HOME_Y                                                                                     # if home_all or 'Y' is in params, home Y
      {% endif %}                                                                                   #
      {% if home_all or 'X' in params %}                                                            # If home_all or 'X' in params, home X
        _HOME_X                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if probe_dock_enable == True and home_all or 'Z' in params %}                                # If probe_dock_enable is true, and home_all or 'Z'
        {attach_macro}                                                                              # is in params, attach the probe
    {% endif %}                                                                                     #

    {% if safe_z == True and home_all or 'Z' in params %}                                           # If safe_z is true and home_all or 'Z' is in params,
        G0 X{safe_x} Y{safe_y} F{travel_speed}                                                      # move to the defined safe XY location
    {% endif %}                                                                                     #
    
    {% if home_all or 'Z' in params %}                                                              #
        G28 Z                                                                                       #
        {% if is_z_hopped != 0 %}                                                                   # If home_all or 'Z' in params, home Z
          G0 Z{z_hop_distance} F{z_hop_speed}                                                       #
          SET_GCODE_VARIABLE MACRO=_Sensorless_Homing_Variables VARIABLE=is_z_hopped VALUE=0        # Check if is_z_hopped variable is 0, if it is not,
        {% endif %}                                                                                 # move Z by configured distance, and set is_z_hopped to 0.
    {% endif %}                                                                                     #
    
    {% if probe_dock_enable == True and home_all or 'Z' in params %}                                # If probe_dock_enable is true, and home_all or 'Z' is in params,
        {detach_macro}                                                                              # detach the probe
    {% endif %}                                                                                     #
